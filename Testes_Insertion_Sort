#include <iostream>
#include <vector>
#include <string>
#include <chrono>
#include <mysql_driver.h>
#include <mysql_connection.h>
#include <cppconn/statement.h>
#include <cppconn/resultset.h>
#include <cppconn/exception.h>

void insertionSort(std::vector<std::string>& data) {
    int n = data.size();
    for (int i = 1; i < n; i++) {
        std::string key = data[i];
        int j = i - 1;

        while (j >= 0 && data[j] > key) {
            data[j + 1] = data[j];
            j--;
        }
        data[j + 1] = key;
    }
}

int main() {
    const std::string dbHost = "";
    const std::string dbUser = "";
    const std::string dbPass = "";
    const std::string dbName = "";
    const std::string tableName = "";

    try {
        sql::mysql::MySQL_Driver* driver = sql::mysql::get_mysql_driver_instance();
        std::unique_ptr<sql::Connection> conn(driver->connect(dbHost, dbUser, dbPass));
        conn->setSchema(dbName);

        std::unique_ptr<sql::Statement> stmt(conn->createStatement());
        std::unique_ptr<sql::ResultSet> res(stmt->executeQuery("SELECT valores FROM " + tableName));

        std::vector<std::string> data;
        while (res->next()) {
            data.push_back(res->getString("valores"));
        }

        auto start = std::chrono::high_resolution_clock::now();
        insertionSort(data);
        auto end = std::chrono::high_resolution_clock::now();

        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        std::cout << "Tempo para ordenar " << tableName << " com Insertion Sort: " << duration.count() << " ms" << std::endl;

    } catch (sql::SQLException& e) {
        std::cerr << "Erro SQL: " << e.what() << std::endl;
    }

    return 0;
}
